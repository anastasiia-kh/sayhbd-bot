const { Scenes, Markup } = require('telegraf');
const { loadUserReminders, saveUserReminders } = require('./userStorage');

const addReminder = new Scenes.WizardScene(
  'addReminder',

  async (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 25.07.1996 –∞–±–æ 1/1/95');
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º.');
    }

    const rawDate = ctx.message.text.trim();
    const dateRegex = /^\d{1,2}[./\-\s]\d{1,2}([./\-\s]\d{2,4})?$/;

    if (!dateRegex.test(rawDate)) {
      const funnyDateErrors = [
  '‚ùå –î–∞—Ç–∞ –≤–∏–≥–ª—è–¥–∞—î —è–∫ —Ä–µ—Ü–µ–ø—Ç –±–∞–±—É—Å—ñ, –∞ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: 25.07.1995',
  'üìÖ –Ø, –∑–≤—ñ—Å–Ω–æ, –±–æ—Ç, –∞–ª–µ —Ç–∞–∫–µ –Ω–∞–≤—ñ—Ç—å –º–µ–Ω–µ –ª—è–∫–∞—î. –°–ø—Ä–æ–±—É–π —Ñ–æ—Ä–º–∞—Ç: 25.07.1995',
  'üòÖ –¶–µ –Ω–µ –¥–∞—Ç–∞, —Ü–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç —É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –≤–∏–º—ñ—Ä. –í–≤–µ–¥–∏ —â–æ—Å—å —Å—Ö–æ–∂–µ –Ω–∞ 1/1/95',
  'üßê –ù—ñ, —Ü–µ –Ω–µ –¥–∞—Ç–∞. –¶–µ —â–æ—Å—å‚Ä¶ –¥—É–∂–µ —Å–º—ñ–ª–∏–≤–µ. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10-12-2000',
  'üß† –ú–æ–∂–µ –∫–∞–≤–∏ —â–µ —Ä–∞–∑? –ë–æ —Ü—è –¥–∞—Ç–∞ –Ω–µ —Å—Ö–æ–∂–∞ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—é. –í–≤–µ–¥–∏ —â–æ—Å—å —Å—Ö–æ–∂–µ –Ω–∞ 1/1/95',
  '‚ùå –¢–∞–∫—É –¥–∞—Ç—É —è –Ω–∞–≤—ñ—Ç—å —É —Å–µ—Ä—ñ–∞–ª—ñ "–¢–µ–º—Ä—è–≤–∞" –Ω–µ –±–∞—á–∏–≤. –°–ø—Ä–æ–±—É—î—à —â–µ —Ä–∞–∑? –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10-12-2000',
  '‚õîÔ∏è –ù—ñ-–Ω—ñ, —è –Ω–µ –º–æ–∂—É —Ü–µ –∑–±–µ—Ä–µ–≥—Ç–∏. –î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ —Å—Ö–æ–∂–∞ –Ω–∞ 25.07.1995 –∞–±–æ —â–æ—Å—å –ø–æ–¥—ñ–±–Ω–µ.'
];

const randomError = funnyDateErrors[Math.floor(Math.random() * funnyDateErrors.length)];
return ctx.reply(randomError);

    }

    const [day, month, yearPart] = rawDate.split(/[./\-\s]/);
    const dayNum = parseInt(day);
    const monthNum = parseInt(month);
    let yearNum = parseInt(yearPart);
    if (yearPart?.length === 2) {
      const currentYear = new Date().getFullYear() % 100;
      const century = yearNum > currentYear ? 1900 : 2000;
      yearNum += century;
    }

    const dateObj = new Date(yearNum, monthNum - 1, dayNum);
    if (
      dateObj.getDate() !== dayNum ||
      dateObj.getMonth() + 1 !== monthNum ||
      dateObj.getFullYear() !== yearNum
    ) {
      return ctx.reply(
        '‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 31.11.2000 ‚Äî —Ü–µ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π –¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
      );
    }

    ctx.wizard.state.date = rawDate;

    ctx.reply(
      'üìù –í–≤–µ–¥–∏ –Ω–æ—Ç–∞—Ç–∫—É (—ñ–º º—è, –ø–æ–¥—ñ—è, —Ç–æ—â–æ)',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏', 'skip_note')]
      ])
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    const { date } = ctx.wizard.state;

    if (ctx.callbackQuery?.data === 'skip_note') {
      ctx.answerCbQuery();
      const reminders = loadUserReminders(ctx.from.id);
      reminders.push({ date, note: '' });
      saveUserReminders(ctx.from.id, reminders);
      ctx.reply(`‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±–µ–∑ –Ω–æ—Ç–∞—Ç–∫–∏ –Ω–∞ ${date}`);
      return ctx.scene.leave();
    }

    if (!ctx.message || !ctx.message.text) {
      return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ –Ω–æ—Ç–∞—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏".');
    }

    const note = ctx.message.text.trim();
    const reminders = loadUserReminders(ctx.from.id);
    reminders.push({ date, note });
    saveUserReminders(ctx.from.id, reminders);
    ctx.reply(`‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${note || '(–±–µ–∑ –Ω–æ—Ç–∞—Ç–∫–∏)'} –Ω–∞ ${date}`);
    return ctx.scene.leave();
  }
);

module.exports = addReminder;
