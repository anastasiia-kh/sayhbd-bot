const { Scenes, Markup } = require('telegraf');
const { loadUserReminders, saveUserReminders } = require('./userStorage');

const mainMenuKeyboard = Markup.keyboard([
  ['‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'],
  ['üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å'],
  ['‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞']
]).resize();

const reminderOptions = [
  { label: '–£ –¥–µ–Ω—å –ø–æ–¥—ñ—ó', value: 0 },
  { label: '–ó–∞ 1 –¥–µ–Ω—å', value: 1 },
  { label: '–ó–∞ 3 –¥–Ω—ñ', value: 3 },
  { label: '–ó–∞ 7 –¥–Ω—ñ–≤', value: 7 }
];

const addReminder = new Scenes.WizardScene(
  'addReminder',

  async (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 25.07.1996 –∞–±–æ 1/1/95', {
      reply_markup: {
        remove_keyboard: true
      }
    });
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º.');
    }

    const rawDate = ctx.message.text.trim();
    const dateRegex = /^\d{1,2}[./\-\s]\d{1,2}([./\-\s]\d{2,4})?$/;

    if (!dateRegex.test(rawDate)) {
      return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –ü—Ä–∏–∫–ª–∞–¥: 25.07.1995');
    }

    const [day, month, yearPart] = rawDate.split(/[./\-\s]/);
    const dayNum = parseInt(day);
    const monthNum = parseInt(month);
    let yearNum = parseInt(yearPart);
    if (yearPart?.length === 2) {
      const currentYear = new Date().getFullYear() % 100;
      const century = yearNum > currentYear ? 1900 : 2000;
      yearNum += century;
    }

    const dateObj = new Date(yearNum, monthNum - 1, dayNum);
    if (
      dateObj.getDate() !== dayNum ||
      dateObj.getMonth() + 1 !== monthNum ||
      dateObj.getFullYear() !== yearNum
    ) {
      return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    }

    ctx.wizard.state.date = rawDate;
    await ctx.reply(
  'üìù –í–≤–µ–¥–∏ –Ω–æ—Ç–∞—Ç–∫—É (—ñ–º º—è, –ø–æ–¥—ñ—è, —Ç–æ—â–æ)',
  Markup.inlineKeyboard([
    [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_note')]
  ])
);
return ctx.wizard.next();

  },

  async (ctx) => {
    if (ctx.callbackQuery?.data === 'skip_note') {
  ctx.wizard.state.note = '';
  await ctx.answerCbQuery('‚è≠ –ù–æ—Ç–∞—Ç–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–æ');
} else if (ctx.message?.text) {
  ctx.wizard.state.note = ctx.message.text.trim();
} else {
  return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ –Ω–æ—Ç–∞—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚Äú–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏‚Äù.');
}

    ctx.wizard.state.remindBefore = [];

    const buttons = reminderOptions.map((opt) =>
      Markup.button.callback(opt.label, `toggle_${opt.value}`)
    );

    ctx.reply(
      'üïê –ö–æ–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è? –û–±–µ—Ä–∏ –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:',
      Markup.inlineKeyboard([
        [buttons[0], buttons[1]],
        [buttons[2], buttons[3]],
        [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'done')]
      ])
    );

    return ctx.wizard.next();
  },

  async (ctx) => {
    const data = ctx.callbackQuery?.data;
    const state = ctx.wizard.state;

    if (!data) return;

    if (data.startsWith('toggle_')) {
      const value = parseInt(data.replace('toggle_', ''));
      const idx = state.remindBefore.indexOf(value);
      if (idx === -1) {
        state.remindBefore.push(value);
      } else {
        state.remindBefore.splice(idx, 1);
      }

      ctx.answerCbQuery(
        state.remindBefore.includes(value)
          ? `‚úÖ –î–æ–¥–∞–Ω–æ: ${value === 0 ? '–£ –¥–µ–Ω—å –ø–æ–¥—ñ—ó' : `–ó–∞ ${value} –¥–Ω—ñ–≤`}`
          : `‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: ${value === 0 ? '–£ –¥–µ–Ω—å –ø–æ–¥—ñ—ó' : `–ó–∞ ${value} –¥–Ω—ñ–≤`}`
      );
    }

    if (data === 'done') {
      if (!state.remindBefore.length) {
        return ctx.answerCbQuery('‚ö†Ô∏è –û–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç!');
      }

      const reminders = loadUserReminders(ctx.from.id);
      reminders.push({
        date: state.date,
        note: state.note,
        remindBefore: state.remindBefore.sort((a, b) => a - b)
      });
      saveUserReminders(ctx.from.id, reminders);

      await ctx.reply('‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', mainMenuKeyboard);
      return ctx.scene.leave();
    }
  }
);

module.exports = addReminder;
