const { Scenes, Markup } = require('telegraf');
const { loadUserReminders, saveUserReminders } = require('./userStorage');

const mainMenuKeyboard = Markup.keyboard([
  ['‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'],
  ['üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å'],
  ['‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞']
]).resize();

const funnyDateErrors = [
  '‚ùå –î–∞—Ç–∞ –≤–∏–≥–ª—è–¥–∞—î —è–∫ —Ä–µ—Ü–µ–ø—Ç –±–∞–±—É—Å—ñ, –∞ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.07.1995',
  'üìÖ –Ø, –∑–≤—ñ—Å–Ω–æ, –±–æ—Ç, –∞–ª–µ 99.99.9999 –Ω–∞–≤—ñ—Ç—å –º–µ–Ω–µ –ª—è–∫–∞—î. –°–ø—Ä–æ–±—É–π —Ñ–æ—Ä–º–∞—Ç: 1/1/95',
  'üòÖ –¶–µ –Ω–µ –¥–∞—Ç–∞, —Ü–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç —É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –≤–∏–º—ñ—Ä. –ù–∞–ø–∏—à–∏ —â–æ—Å—å —Ç–∏–ø—É: 1/1/95',
  'üßê –ù—ñ, —Ü–µ –Ω–µ –¥–∞—Ç–∞. –¶–µ —â–æ—Å—å‚Ä¶ –¥—É–∂–µ —Å–º—ñ–ª–∏–≤–µ. –ö—Ä–∞—â–µ: 10-12-2000',
  '‚ùå –¢–∞–∫—É –¥–∞—Ç—É —è –Ω–∞–≤—ñ—Ç—å —É —Å–µ—Ä—ñ–∞–ª—ñ "–¢–µ–º—Ä—è–≤–∞" –Ω–µ –±–∞—á–∏–≤. –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏: 25.07.1995',
  '‚õîÔ∏è –ù—ñ-–Ω—ñ, —è –Ω–µ –º–æ–∂—É —Ü–µ –∑–±–µ—Ä–µ–≥—Ç–∏. –ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 25.07.1995 –∞–±–æ –ø–æ–¥—ñ–±–Ω–æ–º—É',
  'üìÜ –¶–µ –±—ñ–ª—å—à–µ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–≤–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É. –°–ø—Ä–æ–±—É–π —Ç–∞–∫: 25.07.1995',
  'üõ∏ –¶–µ —â–æ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø—Ä–∏–±—É–ª—å—Ü—ñ–≤? –ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–∞—Ç–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.2000',
  'üìú –Ø –Ω–µ –∞—Ä—Ö—ñ–≤—ñ—Å—Ç. –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –º–∞—î –±—É—Ç–∏ –ø—Ä–æ—Å—Ç–∏–º: 25.07.1995',
  'üï≥Ô∏è –Ø –Ω–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ —Ü—é –¥–∞—Ç—É –Ω–∞–≤—ñ—Ç—å —É –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –º–∞–π—è. –í–≤–µ–¥–∏ —â–æ—Å—å –Ω–∞ –∫—à—Ç–∞–ª—Ç: 10-12-2000'
];

const loadingMessages = [
  'üì¶ –ó–±–µ—Ä—ñ–≥–∞—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è...',
  'üß† –î—É–º–∞—é –Ω–∞–¥ —Ü–∏–º...',
  '‚ú® –£–ø–∞–∫–æ–≤—É—é –≤ –º–æ–∑–æ–∫...',
  'üïê –ó–∞–ø–∏—Å—É—é –≤ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫...',
  'üîÆ –ó–∞–∫–ª–∏–Ω–∞—é –±–æ—Ç–∞ –ø–∞–º º—è—Ç–∞—Ç–∏...',
  'üìã –í–∏—Ä—ñ–∑–∞—é –∑ –ø–∞–ø–µ—Ä—É —ñ –≤–∫–ª–µ—é—é...'
];

const successMessages = [
  '‚úÖ –î–æ–¥–∞–Ω–æ! –ù–∞–¥—ñ–π–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –º—ñ–∂ —Ä—è–¥–∫–∞–º–∏ –∫–æ–¥—É ü§ñ',
  'üìå –ì–æ—Ç–æ–≤–æ! –Ø —Ü–µ –∑–∞–ø–∞–º‚Äô—è—Ç–∞—é –∫—Ä–∞—â–µ, –Ω—ñ–∂ —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è',
  'üß† –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –º–æ—é –≤—ñ—á–Ω—É –ø–∞–º º—è—Ç—å!',
  'üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—É–¥–µ–º–æ!',
  'ü™Ñ –ú–∞–≥—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞—Ç–∞: {date}',
  '‚úÖ –Ñ –∫–æ–Ω—Ç–∞–∫—Ç! {note} –Ω–∞ {date}',
  'üìé –¢–≤–æ—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî –ø—ñ–¥ —Å–∫—Ä—ñ–ø–∫—É —ñ –≤ –∞—Ä—Ö—ñ–≤ üìÅ',
  'üéØ –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ! –ë—É–¥—É –ø—ñ–Ω–≥—É–≤–∞—Ç–∏ —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–Ω—å üìÖ',
  'üìÖ –ó–∞–Ω–æ—Ç–æ–≤–∞–Ω–æ: {note} ‚Äî {date}',
  'üìù –¢–∏—Ö–µ–Ω—å–∫–æ –∑–∞–ø–∏—Å–∞–≤... –Ω—ñ—Ö—Ç–æ –Ω–µ –¥—ñ–∑–Ω–∞—î—Ç—å—Å—è üòâ'
];

const pickSuccessMessage = (note, date) => {
  const withNote = successMessages.filter((msg) => msg.includes('{note}'));
  const withoutNote = successMessages.filter((msg) => !msg.includes('{note}'));

  const pool = note ? withNote : withoutNote;
  const template = pool[Math.floor(Math.random() * pool.length)];

  return template
    .replace('{note}', note)
    .replace('{date}', date);
};

const addReminder = new Scenes.WizardScene(
  'addReminder',

  async (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 25.07.1996 –∞–±–æ 1/1/95', {
      reply_markup: {
        remove_keyboard: true
      }
    });
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º.');
    }

    const rawDate = ctx.message.text.trim();
    const dateRegex = /^\d{1,2}[./\-\s]\d{1,2}([./\-\s]\d{2,4})?$/;

    if (!dateRegex.test(rawDate)) {
      const randomError = funnyDateErrors[Math.floor(Math.random() * funnyDateErrors.length)];
      return ctx.reply(randomError);
    }

    const [day, month, yearPart] = rawDate.split(/[./\-\s]/);
    const dayNum = parseInt(day);
    const monthNum = parseInt(month);
    let yearNum = parseInt(yearPart);
    if (yearPart?.length === 2) {
      const currentYear = new Date().getFullYear() % 100;
      const century = yearNum > currentYear ? 1900 : 2000;
      yearNum += century;
    }

    const dateObj = new Date(yearNum, monthNum - 1, dayNum);
    if (
      dateObj.getDate() !== dayNum ||
      dateObj.getMonth() + 1 !== monthNum ||
      dateObj.getFullYear() !== yearNum
    ) {
      return ctx.reply(
        '‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 31.11.2000 ‚Äî —Ü–µ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π –¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.'
      );
    }

    ctx.wizard.state.date = rawDate;

    ctx.reply(
      'üìù –í–≤–µ–¥–∏ –Ω–æ—Ç–∞—Ç–∫—É (—ñ–º º—è, –ø–æ–¥—ñ—è, —Ç–æ—â–æ)',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏', 'skip_note')]
      ])
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    const { date } = ctx.wizard.state;

    const showSuccess = async (text) => {
      const msgText = loadingMessages[Math.floor(Math.random() * loadingMessages.length)];
      const msg = await ctx.reply(msgText);
      setTimeout(async () => {
        await ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, null, text);
        await ctx.reply('üîΩ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenuKeyboard);
      }, 1500);
    };

    if (ctx.callbackQuery?.data === 'skip_note') {
      ctx.answerCbQuery();
      const reminders = loadUserReminders(ctx.from.id);
      reminders.push({ date, note: '' });
      saveUserReminders(ctx.from.id, reminders);

      await showSuccess(pickSuccessMessage(null, date));
      return ctx.scene.leave();
    }

    if (!ctx.message || !ctx.message.text) {
      return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ –Ω–æ—Ç–∞—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏".');
    }

    const note = ctx.message.text.trim();
    const reminders = loadUserReminders(ctx.from.id);
    reminders.push({ date, note });
    saveUserReminders(ctx.from.id, reminders);

    await showSuccess(pickSuccessMessage(note, date));
    return ctx.scene.leave();
  }
);

module.exports = addReminder;
