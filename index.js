const { Telegraf, Scenes, session, Markup } = require('telegraf');
const cron = require('node-cron');
const fs = require('fs');
const express = require('express');
const { parse, format, isToday, differenceInYears } = require('date-fns');

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

const remindersFile = '/tmp/reminders.json';
if (!fs.existsSync(remindersFile)) {
  fs.writeFileSync(remindersFile, '{}');
}
const loadReminders = () => JSON.parse(fs.existsSync(remindersFile) ? fs.readFileSync(remindersFile) : '{}');
const saveReminders = (data) => fs.writeFileSync(remindersFile, JSON.stringify(data, null, 2));

const addReminderScene = new Scenes.WizardScene(
  'addReminder',
  (ctx) => {
    try {
      const prompts = [
        'üìÖ –ö–∏–¥–∞–π –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12.02.1990 –∞–±–æ 1 –∫–≤—ñ—Ç–Ω—è 1985.',
        'üéÇ –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É, —Ç—ñ–ª—å–∫–∏ –Ω–µ ¬´–∑–∞–≤—Ç—Ä–∞¬ª ‚Äî —è –∂ –±–æ—Ç, –Ω–µ –µ–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å! üòÑ',
        'üóìÔ∏è –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞! –ú–æ–∂–Ω–∞ —è–∫ —Ö–æ—á–µ—à, —è —Ä–æ–∑–±–µ—Ä—É—Å—è.',
        'üìÜ –í–≤–µ–¥–∏ –¥–∞—Ç—É, –ø–æ–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–≤ –≤—ñ—Ç–∞—Ç–∏ üòâ',
        'üë∂ –ö–æ–ª–∏ –∑ º—è–≤–∏–ª–∞—Å—å —Ü—è –ª–µ–≥–µ–Ω–¥–∞ –Ω–∞ —Å–≤—ñ—Ç? –î–∞–π –¥–∞—Ç—É!'
      ];
      const message = prompts[Math.floor(Math.random() * prompts.length)];
      ctx.reply(message);
      ctx.wizard.state.reminder = {};
      return ctx.wizard.next();
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ 1 (–¥–∞—Ç–∞):', err);
      ctx.reply('‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    }
  },
  (ctx) => {
    try {
      if (!ctx.message || !ctx.message.text) {
        return ctx.reply('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —É –≤–∏–≥–ª—è–¥—ñ —Ç–µ–∫—Å—Ç—É.');
      }
      const userInput = ctx.message.text.trim();
      const dateVariants = [
        'dd.MM.yyyy', 'd.MM.yyyy', 'dd.M.yyyy', 'd.M.yyyy',
        'dd-MM-yyyy', 'd-MM-yyyy', 'dd-M-yyyy', 'd-M-yyyy',
        'dd/MM/yyyy', 'd/MM/yyyy', 'dd/M/yyyy', 'd/M/yyyy',
        'dd.MM.yy', 'd.MM.yy', 'dd.M.yy', 'd.M.yy',
        'dd-MM-yy', 'd-MM-yy', 'dd-M-yy', 'd-M-yy',
        'dd/MM/yy', 'd/MM/yy', 'dd/M/yy', 'd/M/yy',
        "dd MMMM yyyy", "dd MMMM yy", "d MMMM yyyy", "d MMMM yy",
        "ddMMMM yyyy", "ddMMMMyy", "dMMMM yyyy", "dMMMMyy"
      ];
      let parsedDate;
      for (const formatStr of dateVariants) {
        try {
          parsedDate = parse(userInput, formatStr, new Date());
          if (!isNaN(parsedDate)) break;
        } catch {}
      }
      if (!parsedDate || isNaN(parsedDate)) {
        return ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π —É —Ñ–æ—Ä–º–∞—Ç—ñ: 12.02.1990, 2/12/95 –∞–±–æ 02 –≥—Ä—É–¥–Ω—è 1995.');
      }
      const normalized = format(parsedDate, 'dd.MM.yyyy');
      ctx.wizard.state.reminder.date = normalized;
      ctx.reply('üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"', Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).oneTime().resize());
      return ctx.wizard.next();
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ 2 (–Ω–æ—Ç–∞—Ç–∫–∞):', err);
      ctx.reply('‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    }
  },
  (ctx) => {
    try {
      if (!ctx.message || !ctx.message.text) {
        return ctx.reply('‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏".');
      }
      const note = ctx.message.text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' ? '' : ctx.message.text;
      const reminders = loadReminders();
      const userId = ctx.from.id;
      if (!reminders[userId]) reminders[userId] = [];
      reminders[userId].push({ date: ctx.wizard.state.reminder.date, note });
      saveReminders(reminders);
      const messages = [
        '‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
        'üìÖ –ó–∞–ø–∏—Å–∞–≤! –¢–µ–ø–µ—Ä –Ω–µ –∑–∞–±—É–¥–µ—à.',
        'üìì –î–æ–¥–∞–Ω–æ –≤ –º—ñ–π —Å–ø–∏—Å–æ–∫ –ø–∞–º º—è—Ç—ñ!',
        'üß† –ó–∞–Ω–æ—Ç–æ–≤–∞–Ω–æ! –Ø –≤–∂–µ –∑–∞–ø–∞–º º—è—Ç–∞–≤.',
        'üéØ –Ñ –∫–æ–Ω—Ç–∞–∫—Ç! –Ø –Ω–∞–≥–∞–¥–∞—é –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ.'
      ];
      const randomMsg = messages[Math.floor(Math.random() * messages.length)];
      ctx.reply(randomMsg, Markup.removeKeyboard());
      return ctx.scene.leave();
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ 3 (–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è):', err);
      ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    }
  }
);

const stage = new Scenes.Stage([addReminderScene]);
bot.use(session());
bot.use(stage.middleware());

bot.start((ctx) => {
  const name = ctx.from.first_name || '–¥—Ä—É–∂–µ';
  ctx.reply(
    `üëã –ü—Ä–∏–≤—ñ—Ç, ${name}!
–Ø —Ç–æ–π —Å–∞–º–∏–π –±–æ—Ç, —è–∫–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞–ª–æ –≤ —Ç–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ, –∫–æ–ª–∏ —Ç–∏ –ø–∏—Å–∞–≤ ¬´–ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è¬ª –Ω–∞ –¥–≤–∞ –¥–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ... üòèüéÇ\n–î–æ–¥–∞–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî —ñ –±—ñ–ª—å—à–µ –∂–æ–¥–Ω–∏—Ö —Ñ–µ–π–ª—ñ–≤!`,
    Markup.keyboard([['üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', '‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è']]).resize()
  );
});

bot.hears('‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', (ctx) => ctx.scene.enter('addReminder'));

bot.hears('üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å', (ctx) => {
  const userId = ctx.from.id;
  const reminders = loadReminders();
  const userReminders = reminders[userId] || [];
  if (userReminders.length === 0) {
    return ctx.reply('üì≠ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
  }
  userReminders.forEach((reminder, index) => {
    const age = reminder.date.match(/\d{4}/)
      ? ` ‚Äî –≤–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è ${differenceInYears(new Date(), parse(reminder.date, 'dd.MM.yyyy', new Date()))}`
      : '';
    const caption = `üéâ ${reminder.date}${age}${reminder.note ? `\nüìù ${reminder.note}` : ''}`;
    ctx.reply(caption, Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', `edit_${index}`),
        Markup.button.callback('üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', `delete_${index}`)
      ]
    ]));
  });
});

const birthdayTemplates = [
  `üéâ –°—å–æ–≥–æ–¥–Ω—ñ –≤–∞–∂–ª–∏–≤–∞ –¥–∞—Ç–∞!\nüìÖ {date} ‚Äî –≤–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è {age} —Ä–æ–∫—ñ–≤!\n{note}`,
  `ü¶Ñ –£–≤–∞–≥–∞-—É–≤–∞–≥–∞! –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ñ!\nüéÇ {date} ‚Äî {age} —Ä–æ–∫—ñ–≤!\n{note}`,
  `üîî –ë—ñ–ø-–±–æ–ø! –°–≤—è—Ç–∫–æ–≤–∏–π –∞–ª–µ—Ä—Ç!\nüóì {date} ‚Äî —Å–≤—è—Ç–∫—É—î–º–æ {age} —Ä–æ–∫—ñ–≤!\n{note}`,
  `üåü {date} ‚Äî {age} —Ä–æ–∫—ñ–≤\n{note}`
];

cron.schedule('* * * * *', () => {
  const reminders = loadReminders();
  const today = format(new Date(), 'dd.MM');
  Object.entries(reminders).forEach(([userId, userReminders]) => {
    userReminders.forEach((reminder) => {
      const parsed = parse(reminder.date, 'dd.MM.yyyy', new Date());
      const reminderDate = format(parsed, 'dd.MM');
      if (reminderDate === today) {
        const age = differenceInYears(new Date(), parsed);
        const template = birthdayTemplates[Math.floor(Math.random() * birthdayTemplates.length)];
        const text = template
          .replace('{date}', reminder.date)
          .replace('{age}', age)
          .replace('{note}', reminder.note || '');
        bot.telegram.sendMessage(userId, text);
      }
    });
  });
});

app.use(express.json());
app.use(bot.webhookCallback('/webhook'));
app.get('/', (req, res) => res.send('OK'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Å–ª—É—Ö–∞—î –ø–æ—Ä—Ç ${PORT}`);
});
if (process.env.RENDER_EXTERNAL_URL) {
  bot.telegram.setWebhook(`${process.env.RENDER_EXTERNAL_URL}/webhook`);
}
