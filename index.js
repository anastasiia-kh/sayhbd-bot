const { Telegraf, Scenes, session, Markup } = require('telegraf');
const fs = require('fs');
const { parse, format, isToday } = require('date-fns');

const bot = new Telegraf('7520027372:AAG6I_xS7O8adDg83Nue6zb8gNljDFVWMe4');
const remindersFile = 'reminders.json';

// Helpers
const loadReminders = () => JSON.parse(fs.existsSync(remindersFile) ? fs.readFileSync(remindersFile) : '{}');
const saveReminders = (data) => fs.writeFileSync(remindersFile, JSON.stringify(data, null, 2));

// Scenes
const addReminderScene = new Scenes.WizardScene(
  'addReminder',
  (ctx) => {
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–±—É–¥—å-—è–∫–∏–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 12.02.1990):');
    ctx.wizard.state.reminder = {};
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.reminder.date = ctx.message.text;
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"', Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).oneTime().resize());
    return ctx.wizard.next();
  },
  (ctx) => {
    const note = ctx.message.text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' ? '' : ctx.message.text;
    const reminders = loadReminders();
    const userId = ctx.from.id;
    if (!reminders[userId]) reminders[userId] = [];

    reminders[userId].push({ date: ctx.wizard.state.reminder.date, note });
    saveReminders(reminders);

    ctx.reply('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', Markup.removeKeyboard());
    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage([addReminderScene]);
bot.use(session());
bot.use(stage.middleware());

// Commands
bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n/add ‚Äî –¥–æ–¥–∞—Ç–∏\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å'));

bot.command('add', (ctx) => ctx.scene.enter('addReminder'));

bot.command('list', (ctx) => {
  const reminders = loadReminders()[ctx.from.id] || [];
  if (!reminders.length) return ctx.reply('–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.');

  reminders.forEach((r, i) => {
    ctx.reply(`${i + 1}. ${r.date} ‚Äî ${r.note || '–±–µ–∑ –Ω–æ—Ç–∞—Ç–∫–∏'}`);
  });
});

// –©–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
const checkReminders = () => {
  const reminders = loadReminders();
  Object.entries(reminders).forEach(([userId, items]) => {
    items.forEach((item) => {
      const parsedDate = parse(item.date, 'dd.MM.yyyy', new Date());
      if (isToday(parsedDate)) {
        const age = new Date().getFullYear() - parsedDate.getFullYear();
        const ageText = age > 0 ? ` ‚Äî –≤–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è ${age} —Ä–æ–∫—ñ–≤!` : '';
        bot.telegram.sendMessage(userId, `üéâ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${item.note || '–±–µ–∑ –Ω–æ—Ç–∞—Ç–∫–∏'}${ageText}`);
      }
    });
  });
};

// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ 9:00
setInterval(checkReminders, 1000 * 60 * 60 * 24);

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ');
