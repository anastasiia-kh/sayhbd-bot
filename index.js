const { Telegraf, Scenes, session, Markup } = require('telegraf');
const fs = require('fs');
const { parse, format, isToday } = require('date-fns');

const bot = new Telegraf(process.env.BOT_TOKEN);
const remindersFile = '/tmp/reminders.json';

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è reminders.json, —è–∫—â–æ –π–æ–≥–æ –Ω–µ —ñ—Å–Ω—É—î
if (!fs.existsSync(remindersFile)) {
  fs.writeFileSync(remindersFile, '{}');
}

const loadReminders = () => JSON.parse(fs.existsSync(remindersFile) ? fs.readFileSync(remindersFile) : '{}');
const saveReminders = (data) => fs.writeFileSync(remindersFile, JSON.stringify(data, null, 2));

const addReminderScene = new Scenes.WizardScene(
  'addReminder',
  (ctx) => {
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 12.02.1990):');
    ctx.wizard.state.reminder = {};
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.wizard.state.reminder.date = ctx.message.text;
    ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"', Markup.keyboard(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']).oneTime().resize());
    return ctx.wizard.next();
  },
  (ctx) => {
    const note = ctx.message.text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' ? '' : ctx.message.text;
    const reminders = loadReminders();
    const userId = ctx.from.id;
    if (!reminders[userId]) reminders[userId] = [];

    reminders[userId].push({ date: ctx.wizard.state.reminder.date, note });
    saveReminders(reminders);

    ctx.reply('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', Markup.removeKeyboard());
    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage([addReminderScene]);
bot.use(session());
bot.use(stage.middleware());

bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n/add ‚Äî –¥–æ–¥–∞—Ç–∏\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å'));

bot.command('add', (ctx) => ctx.scene.enter('addReminder'));

bot.command('list', (ctx) => {
  const reminders = loadReminders()[ctx.from.id] || [];
  if (!reminders.length) return ctx.reply('–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.');

  reminders.forEach((r, i) => {
    const text = `${i + 1}. ${r.date}${r.note ? ' ‚Äî ' + r.note : ''}`;
    ctx.reply(text, Markup.inlineKeyboard([
      Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', `edit_${i}`),
      Markup.button.callback('üóë –í–∏–¥–∞–ª–∏—Ç–∏', `delete_${i}`)
    ]));
  });
});

bot.action(/delete_(\d+)/, (ctx) => {
  const idx = Number(ctx.match[1]);
  const reminders = loadReminders();
  const userId = ctx.from.id;
  if (reminders[userId]) reminders[userId].splice(idx, 1);
  saveReminders(reminders);
  ctx.editMessageText('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!');
});

bot.action(/edit_(\d+)/, (ctx) => {
  const idx = Number(ctx.match[1]);
  ctx.session.editIdx = idx;
  ctx.session.tempReminder = { ...loadReminders()[ctx.from.id][idx] };
  ctx.session.editStep = 'date';
  ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–î–∞–ª—ñ")', Markup.inlineKeyboard([
    Markup.button.callback('‚û°Ô∏è –î–∞–ª—ñ', 'skip_to_note')
  ]));
});

bot.action('skip_to_note', (ctx) => {
  ctx.session.editStep = 'note';
  ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–±–µ—Ä–µ–≥—Ç–∏")', Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit')
  ]));
});

bot.action('save_edit', (ctx) => {
  const reminders = loadReminders();
  const userId = ctx.from.id;
  const idx = ctx.session.editIdx;
  const original = reminders[userId][idx];
  const updated = ctx.session.tempReminder;

  if (original.date === updated.date && original.note === updated.note) {
    ctx.reply('–ñ–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.');
  } else {
    reminders[userId][idx] = updated;
    saveReminders(reminders);
    ctx.reply('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!');
  }
  delete ctx.session.editIdx;
  delete ctx.session.editStep;
  delete ctx.session.tempReminder;
});

bot.on('text', (ctx) => {
  if (ctx.session.editIdx !== undefined) {
    const userId = ctx.from.id;
    const step = ctx.session.editStep;

    if (step === 'date') {
      ctx.session.tempReminder.date = ctx.message.text;
      ctx.session.editStep = 'note';
      ctx.reply('–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–±–µ—Ä–µ–≥—Ç–∏")', Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit')
      ]));
    } else if (step === 'note') {
      ctx.session.tempReminder.note = ctx.message.text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' ? '' : ctx.message.text;
      ctx.reply('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–±–µ—Ä–µ–≥—Ç–∏", —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–º—ñ–Ω–∏.', Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit')
      ]));
    }
  }
});

const checkReminders = () => {
  const reminders = loadReminders();
  Object.entries(reminders).forEach(([userId, items]) => {
    items.forEach((item) => {
      const parsedDate = parse(item.date, 'dd.MM.yyyy', new Date());
      if (isToday(parsedDate)) {
        const age = new Date().getFullYear() - parsedDate.getFullYear();
        const ageText = age > 0 ? ` ‚Äî –≤–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è ${age} —Ä–æ–∫—ñ–≤!` : '';
        bot.telegram.sendMessage(userId, `üéâ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${item.note || ''}${ageText}`);
      }
    });
  });
};

setInterval(checkReminders, 1000 * 60 * 60 * 24);

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ');
