const { Scenes, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');

const dataDir = './data'; // –¢–≤–æ—è –ø–∞–ø–∫–∞ –∑ –¥–∞–Ω–∏–º–∏
const getUserFilePath = (userId) => path.join(dataDir, `${userId}.json`);

const loadReminders = (userId) =>
  fs.existsSync(getUserFilePath(userId))
    ? JSON.parse(fs.readFileSync(getUserFilePath(userId)))
    : [];

const saveReminders = (userId, data) =>
  fs.writeFileSync(getUserFilePath(userId), JSON.stringify(data, null, 2));

const editReminder = new Scenes.WizardScene(
  'editReminder',

  // –ö—Ä–æ–∫ 0 - –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ó–±–µ—Ä–µ–≥—Ç–∏ –π –≤–∏–π—Ç–∏")
  async (ctx) => {
    const reminders = ctx.scene.state.allReminders || loadReminders(ctx.from.id);
    const editId = ctx.scene.state.editId;
    const reminder = reminders.find(r => r.id === editId);

    if (!reminder) {
      await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
      return ctx.scene.leave();
    }

    ctx.scene.state.reminder = { ...reminder };
    ctx.scene.state.selectedRemindBefore = new Set(reminder.remindBefore || []);
    ctx.scene.state.editing = null;

    // –ú–µ–Ω—é –±–µ–∑ "–ó–±–µ—Ä–µ–≥—Ç–∏ –π –≤–∏–π—Ç–∏"
    const buttons = [];
    if (ctx.scene.state.editing !== 'date') buttons.push('üóì –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É');
    if (ctx.scene.state.editing !== 'note') buttons.push('üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É');
    if (ctx.scene.state.editing !== 'remindBefore') buttons.push('‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–¥–Ω—ñ)');
    buttons.push('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏');

    await ctx.reply(
      `–†–µ–¥–∞–≥—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\nüìÖ ${reminder.date}${reminder.note ? ` ‚Äî ${reminder.note}` : ''}\n\n–©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?`,
      Markup.keyboard(buttons).resize()
    );

    return;
  },

  // –ö—Ä–æ–∫ 1 - –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É
  async (ctx) => {
    const text = ctx.message?.text;
    if (!text) {
      await ctx.reply('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.');
      return;
    }

    if (text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏') {
      await ctx.reply('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', Markup.removeKeyboard());
      return ctx.scene.leave();
    }

    if (text === 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –π –≤–∏–π—Ç–∏') {
      await saveChanges(ctx);
      return ctx.scene.leave();
    }

    if (text === 'üóì –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É') {
      ctx.scene.state.editing = 'date';
      await ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 25.07.1996 –∞–±–æ 1/1/95 –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è', Markup.removeKeyboard());
      return ctx.wizard.next();
    }

    if (text === 'üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É') {
      ctx.scene.state.editing = 'note';
      await ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è', Markup.removeKeyboard());
      return ctx.wizard.next();
    }

    if (text === '‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–¥–Ω—ñ)') {
      ctx.scene.state.editing = 'remindBefore';
      await showRemindBeforeButtons(ctx);
      return ctx.wizard.selectStep(3);
    }

    await ctx.reply('‚ö†Ô∏è –û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π.');
  },

  // –ö—Ä–æ–∫ 2 - –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –∞–±–æ –Ω–æ—Ç–∞—Ç–∫–∏
  async (ctx) => {
    const text = ctx.message?.text;

    if (text === '/cancel') {
      ctx.scene.state.editing = null;
      await ctx.reply('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.', Markup.removeKeyboard());
      await editReminder.steps[0](ctx);
      return ctx.wizard.selectStep(1);
    }

    if (ctx.scene.state.editing === 'date') {
      const rawDate = text?.trim();
      const dateRegex = /^\d{1,2}[./\-\s]\d{1,2}[./\-\s]\d{2,4}$/;

      if (!rawDate || !dateRegex.test(rawDate)) {
        return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥–∏ /cancel.');
      }

      const [day, month, yearPart] = rawDate.split(/[./\-\s]/);
      const dayNum = Number(day);
      const monthNum = Number(month);
      let yearNum = Number(yearPart);

      if (yearPart.length === 2) {
        const currentYear = new Date().getFullYear() % 100;
        const century = yearNum > currentYear ? 1900 : 2000;
        yearNum += century;
      }

      const dateObj = new Date(yearNum, monthNum - 1, dayNum);

      if (
        dateObj.getDate() !== dayNum ||
        dateObj.getMonth() + 1 !== monthNum ||
        dateObj.getFullYear() !== yearNum
      ) {
        return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥–∏ /cancel.');
      }

      ctx.scene.state.reminder.date = rawDate;
      ctx.scene.state.editing = null;
      await ctx.reply(`–î–∞—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${rawDate}`);
      await editReminder.steps[0](ctx);
      return ctx.wizard.selectStep(1);
    }

    if (ctx.scene.state.editing === 'note') {
      const note = text?.trim();
      ctx.scene.state.reminder.note = note || '';
      ctx.scene.state.editing = null;
      await ctx.reply(`–ù–æ—Ç–∞—Ç–∫—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${ctx.scene.state.reminder.note || '(–ø–æ—Ä–æ–∂–Ω—è)'}`);
      await editReminder.steps[0](ctx);
      return ctx.wizard.selectStep(1);
    }
  },

  // –ö—Ä–æ–∫ 3 - –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è remindBefore
  async (ctx) => {
    const data = ctx.callbackQuery?.data;
    if (!data) return;

    if (data === 'skip_remind') {
      ctx.scene.state.selectedRemindBefore.clear();
      await ctx.reply('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.');
      await editReminder.steps[0](ctx);
      return ctx.wizard.selectStep(1);
    }

    if (data.startsWith('toggle_')) {
      const day = Number(data.split('_')[1]);
      const selected = ctx.scene.state.selectedRemindBefore;

      if (selected.has(day)) {
        selected.delete(day);
      } else {
        selected.add(day);
      }

      await showRemindBeforeButtons(ctx);
      await ctx.answerCbQuery();
      return;
    }

    if (data === 'save_edit') {
      ctx.scene.state.reminder.remindBefore = Array.from(ctx.scene.state.selectedRemindBefore).sort((a,b) => a-b);
      ctx.scene.state.editing = null;
      await ctx.reply('üîñ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.');
      await editReminder.steps[0](ctx);
      return ctx.wizard.selectStep(1);
    }

    if (data === 'cancel_edit') {
      ctx.scene.state.editing = null;
      await ctx.reply('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
      await editReminder.steps[0](ctx);
      return ctx.wizard.selectStep(1);
    }
  }
);

async function showRemindBeforeButtons(ctx) {
  const selected = ctx.scene.state.selectedRemindBefore;

  if (ctx.callbackQuery) {
    await ctx.editMessageText(
      `–û–±–µ—Ä—ñ—Ç—å, –∫–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏:\n(–Ω–∞—Ç–∏—Å–∫–∞–π —â–æ–± –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏)`,
      Markup.inlineKeyboard([
        [0,1,3,7].map(d => Markup.button.callback(selected.has(d) ? `‚úÖ ${d} –¥–Ω.` : `${d} –¥–Ω.`, `toggle_${d}`)),
        [
          Markup.button.callback('‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_remind'),
          Markup.button.callback('üíæ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit'),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')
        ]
      ])
    );
  } else {
    await ctx.reply(
      `–û–±–µ—Ä—ñ—Ç—å, –∫–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏:\n(–Ω–∞—Ç–∏—Å–∫–∞–π —â–æ–± –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏)`,
      Markup.inlineKeyboard([
        [0,1,3,7].map(d => Markup.button.callback(selected.has(d) ? `‚úÖ ${d} –¥–Ω.` : `${d} –¥–Ω.`, `toggle_${d}`)),
        [
          Markup.button.callback('‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_remind'),
          Markup.button.callback('üíæ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit'),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')
        ]
      ])
    );
  }
}

async function saveChanges(ctx) {
  const userId = ctx.from.id;
  const reminders = loadReminders(userId);
  const reminderIndex = reminders.findIndex(r => r.id === ctx.scene.state.editId);

  if (reminderIndex === -1) {
    await ctx.reply('‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.');
    return;
  }

  reminders[reminderIndex] = ctx.scene.state.reminder;
  saveReminders(userId, reminders);

  await ctx.reply('‚úÖ –í—Å—ñ –∑–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.', Markup.removeKeyboard());
}

module.exports = editReminder;
