const { Scenes, Markup } = require('telegraf');
const { loadUserReminders, saveUserReminders } = require('./userStorage');

const mainMenuKeyboard = Markup.keyboard([
  ['‚ûï –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'],
  ['üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å'],
  ['‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞']
]).resize();

const editSuccessMessages = [
  '‚úèÔ∏è –ì–æ—Ç–æ–≤–æ! –Ø –ø–µ—Ä–µ–ø–∏—Å–∞–≤ —É—Å–µ –∫—Ä–∞—â–µ, –Ω—ñ–∂ –±—É–¥—å-—è–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä üìö',
  'üõ†Ô∏è –û–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏–≥–ª—è–¥–∞—î —â–µ –∫—Ä–∞—â–µ!',
  '‚úÖ –í—Å–µ –ø—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, —è–∫ —Ç–∏ –ø—Ä–æ—Å–∏–≤(–ª–∞)',
  'üìù –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä —É –º–µ–Ω–µ –æ—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è!',
  'üîÅ –í—Å–µ –∑–º—ñ–Ω–∏–≤. –°–≤—ñ–∂–µ, —è–∫ —Ç—ñ–ª—å–∫–∏ –∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞!',
  'üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –£ –Ω–æ–≤—ñ–π —Ä–µ–¥–∞–∫—Ü—ñ—ó –≤–∏–≥–ª—è–¥–∞—î —á—É–¥–æ–≤–æ!',
  'üßº –ü–æ—á–∏—Å—Ç–∏–≤-–ø—ñ–¥—à–∞–º–∞–Ω–∏–≤ ‚Äî –≥–æ—Ç–æ–≤–æ!',
  'üßô‚Äç‚ôÇÔ∏è –¢—Ä—ñ—à–∫–∏ –º–∞–≥—ñ—ó ‚Äî —ñ –≤—Å–µ —è–∫ –Ω–æ–≤–µ–Ω—å–∫–µ!',
  'üñäÔ∏è –ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å –Ω–µ –≤–ø—ñ–∑–Ω–∞—Ç–∏ üòâ',
  'üîß –í–Ω–µ—Å–µ–Ω–æ –∑–º—ñ–Ω–∏. –ù–æ—Ç–∞—Ç–∫–∞ —Å—Ç–∞–ª–∞ —â–µ –∫—Ä–∞—â–æ—é!'
];

const loadingMessages = [
  'üîß –í–Ω–æ—à—É –∑–º—ñ–Ω–∏...',
  'üñäÔ∏è –ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª—é—é –Ω–æ—Ç–∞—Ç–∫—É...',
  'üßπ –®–ª—ñ—Ñ—É—é –¥–∞—Ç—É —ñ –Ω–æ—Ç–∞—Ç–∫—É...',
  '‚úèÔ∏è –ü–µ—Ä–µ–ø–∏—Å—É—é –∫—Ä–∞—Å–∏–≤–æ...',
  'üí≠ –î—É–º–∞—é, —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–∞—â–µ...',
  'üïê –û–Ω–æ–≤–ª—é—é –∑–∞–ø–∏—Å —É –±–∞–∑—ñ...'
];

const editReminder = new Scenes.WizardScene(
  'editReminder',

  (ctx) => {
    const reminders = loadUserReminders(ctx.from.id);
    const index = ctx.session.editingIndex;

    if (!reminders[index]) {
      ctx.reply('‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', mainMenuKeyboard);
      return ctx.scene.leave();
    }

    ctx.session.reminders = reminders;

    ctx.reply(
      '‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25.07.1995):',
      {
        reply_markup: {
          remove_keyboard: true
        }
      }
    );

    return ctx.wizard.next();
  },

  (ctx) => {
    if (ctx.callbackQuery?.data === 'skip_date') {
      ctx.session.skipDate = true;
      ctx.answerCbQuery();
      ctx.reply(
        'üìù –í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É (–∞–±–æ –∑–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—å–æ):',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_note')],
          [Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')]
        ])
      );
      return ctx.wizard.next();
    }

    if (ctx.callbackQuery?.data === 'cancel_edit') {
      ctx.answerCbQuery();
      ctx.reply('‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', mainMenuKeyboard);
      return ctx.scene.leave();
    }

    if (!ctx.message || !ctx.message.text || !/^\d{1,2}[./\-\s]\d{1,2}([./\-\s]\d{2,4})?$/.test(ctx.message.text.trim())) {
      return ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –ü—Ä–∏–∫–ª–∞–¥: 25.07.1995');
    }

    ctx.session.newDate = ctx.message.text.trim();

    ctx.reply(
      'üìù –í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É (–∞–±–æ –∑–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—å–æ):',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_note')],
        [Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')]
      ])
    );
    return ctx.wizard.next();
  },

  async (ctx) => {
    if (ctx.callbackQuery?.data === 'skip_note') {
      ctx.session.skipNote = true;
      ctx.answerCbQuery();
    } else if (ctx.callbackQuery?.data === 'cancel_edit') {
      ctx.answerCbQuery();
      ctx.reply('‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', mainMenuKeyboard);
      return ctx.scene.leave();
    } else if (ctx.message && ctx.message.text) {
      ctx.session.newNote = ctx.message.text.trim();
    }

    const reminders = ctx.session.reminders;
    const index = ctx.session.editingIndex;
    let updated = false;

    if (!ctx.session.skipDate && ctx.session.newDate) {
      reminders[index].date = ctx.session.newDate;
      updated = true;
    }

    if (!ctx.session.skipNote && typeof ctx.session.newNote === 'string') {
      reminders[index].note = ctx.session.newNote;
      updated = true;
    }

    saveUserReminders(ctx.from.id, reminders);

    const loadingText = loadingMessages[Math.floor(Math.random() * loadingMessages.length)];
    const msg = await ctx.reply(loadingText);

    setTimeout(() => {
      const finalText = updated
        ? editSuccessMessages[Math.floor(Math.random() * editSuccessMessages.length)]
        : '‚ÑπÔ∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ.';

      ctx.telegram.editMessageText(ctx.chat.id, msg.message_id, null, finalText);
      ctx.reply('üîΩ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenuKeyboard);
    }, 1500);

    return ctx.scene.leave();
  }
);

module.exports = editReminder;
