const { Scenes, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');

const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

const getUserFilePath = (userId) => path.join(dataDir, `${userId}.json`);

function loadUserReminders(userId) {
  try {
    const filePath = getUserFilePath(userId);
    if (fs.existsSync(filePath)) {
      const raw = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(raw);
    }
  } catch (e) {
    console.error('Error reading reminders for user', userId, e);
  }
  return [];
}

function saveUserReminders(userId, data) {
  try {
    fs.writeFileSync(getUserFilePath(userId), JSON.stringify(data, null, 2));
  } catch (e) {
    console.error('Error saving reminders for user', userId, e);
  }
}

const reminderOptions = [
  { label: '–£ –¥–µ–Ω—å –ø–æ–¥—ñ—ó', value: 0 },
  { label: '–ó–∞ 1 –¥–µ–Ω—å', value: 1 },
  { label: '–ó–∞ 3 –¥–Ω—ñ', value: 3 },
  { label: '–ó–∞ 7 –¥–Ω—ñ–≤', value: 7 }
];

const editReminder = new Scenes.BaseScene('editReminder');

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó
async function handleCancel(ctx) {
  await ctx.reply(
    '‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –ù–µ–º–∞—î –ø—Ä–æ —â–æ —Ç—É—Ä–±—É–≤–∞—Ç–∏—Å—å.',
    Markup.keyboard(['‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']).resize()
  );
  ctx.scene.state.editStep = 'afterEdit'; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
}

editReminder.enter(async (ctx) => {
  const reminders = ctx.scene.state.allReminders || loadUserReminders(ctx.from.id);
  const editId = ctx.scene.state.editId;
  const reminder = reminders.find(r => r.id === editId);

  if (!reminder) {
    await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
    return ctx.scene.leave();
  }

  ctx.scene.state.reminder = { ...reminder };
  ctx.scene.state.selectedRemindBefore = new Set(reminder.remindBefore || []);
  ctx.scene.state.editStep = 'menu';
  ctx.scene.state.remindersList = reminders;

  await showMainMenu(ctx);
});

editReminder.on('text', async (ctx) => {
  const step = ctx.scene.state.editStep;
  const text = ctx.message.text;

  // –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç
  if (text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' || text === '/cancel') {
    return handleCancel(ctx);
  }

  if (step === 'menu') {
    if (text === 'üóì –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É') {
      ctx.scene.state.editStep = 'editDate';
      await ctx.reply(
        '–í–≤–µ–¥–∏ –Ω–æ–≤—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 25.07.1996 –∞–±–æ 1/1/95\n–ê–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è',
        Markup.keyboard(['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è']).resize()
      );
      return;
    }

    if (text === 'üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É') {
      ctx.scene.state.editStep = 'editNote';
      await ctx.reply(
        '–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è',
        Markup.keyboard(['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è']).resize()
      );
      return;
    }

    if (text === '‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å') {
      ctx.scene.state.editStep = 'editRemindBefore';
      await ctx.reply('–í–∏–±–µ—Ä–∏, –∫–æ–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏):');
      await showRemindBeforeButtons(ctx);
      return;
    }

    if (text === '‚ùå –í–∏–π—Ç–∏ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è') {
      await ctx.reply('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', Markup.removeKeyboard());
      return ctx.scene.leave();
    }

    await ctx.reply('‚ö†Ô∏è –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.');
    return;
  }

  if (step === 'editDate') {
    const dateRegex = /^\d{1,2}[./\-\s]\d{1,2}[./\-\s]\d{2,4}$/;
    if (!dateRegex.test(text)) {
      await ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ /cancel.');
      return;
    }

    const [day, month, yearPart] = text.split(/[./\-\s]/);
    let yearNum = Number(yearPart);
    const currentYear = new Date().getFullYear() % 100;
    const century = yearNum > currentYear ? 1900 : 2000;
    if (yearPart.length === 2) yearNum += century;

    ctx.scene.state.reminder.date = text;
    ctx.scene.state.editStep = 'afterEdit';
    ctx.scene.state.reminder.dateEdited = true;

    await ctx.reply(
      `–î–∞—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${text}`,
      Markup.keyboard(['‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']).resize()
    );
    return;
  }

  if (step === 'editNote') {
    ctx.scene.state.reminder.note = text || '';
    ctx.scene.state.editStep = 'afterEdit';
    ctx.scene.state.reminder.noteEdited = true;

    await ctx.reply(
      `–ù–æ—Ç–∞—Ç–∫—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${ctx.scene.state.reminder.note || '(–ø–æ—Ä–æ–∂–Ω—è)'}`,
      Markup.keyboard(['‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']).resize()
    );
    return;
  }

  if (step === 'afterEdit') {
    if (text === '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è') {
      ctx.scene.state.editStep = 'menu';
      await showMainMenu(ctx);
      return;
    } else if (text === 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é') {
      await saveChanges(ctx);
      ctx.scene.state.editStep = 'menu';
      await showMainMenu(ctx);
      return;
    } else {
      await ctx.reply('‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
      return;
    }
  }
});

editReminder.on('callback_query', async (ctx) => {
  if (ctx.scene.state.editStep !== 'editRemindBefore') return;

  const data = ctx.callbackQuery.data;
  const selected = ctx.scene.state.selectedRemindBefore;

  if (data === 'skip_remind') {
    selected.clear();
    await ctx.answerCbQuery('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ');
    await ctx.reply(
      '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.',
      Markup.keyboard(['‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']).resize()
    );
    ctx.scene.state.editStep = 'afterEdit';
    return;
  }

  if (data.startsWith('toggle_')) {
    const day = Number(data.split('_')[1]);
    if (selected.has(day)) selected.delete(day);
    else selected.add(day);

    await ctx.answerCbQuery();
    await showRemindBeforeButtons(ctx);
    return;
  }

  if (data === 'save_edit') {
    ctx.scene.state.reminder.remindBefore = Array.from(selected).sort((a, b) => a - b);
    ctx.scene.state.remindBeforeEdited = true;
    ctx.scene.state.editStep = 'afterEdit';
    await ctx.answerCbQuery('–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.');
    await ctx.reply(
      '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.',
      Markup.keyboard(['‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']).resize()
    );
    return;
  }

  if (data === 'cancel_edit') {
    ctx.scene.state.editStep = 'menu';
    await ctx.answerCbQuery('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
    await showMainMenu(ctx);
    return;
  }
});

async function showMainMenu(ctx) {
  const reminder = ctx.scene.state.reminder;
  const buttons = [
    `üóì –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É${reminder.dateEdited ? ' ‚úîÔ∏è' : ''}`,
    `üìù –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É${reminder.noteEdited ? ' ‚úîÔ∏è' : ''}`,
    `‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å${reminder.remindBeforeEdited ? ' ‚úîÔ∏è' : ''}`,
    '‚ùå –í–∏–π—Ç–∏ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
  ];

  await ctx.reply(
    `–†–µ–¥–∞–≥—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\nüìÖ ${reminder.date}${reminder.note ? ` ‚Äî ${reminder.note}` : ''}\n\n–©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?`,
    Markup.keyboard(buttons).resize()
  );
}

async function showRemindBeforeButtons(ctx) {
  const selected = ctx.scene.state.selectedRemindBefore;
  if (ctx.callbackQuery) {
    await ctx.editMessageText(
      '–û–±–µ—Ä—ñ—Ç—å, –∫–æ–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–∫–∞–π —â–æ–± –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏):',
      Markup.inlineKeyboard([
        [0, 1, 3, 7].map((d) =>
          Markup.button.callback(selected.has(d) ? `‚úÖ ${d} –¥–Ω.` : `${d} –¥–Ω.`, `toggle_${d}`)
        ),
        [
          Markup.button.callback('‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_remind'),
          Markup.button.callback('üíæ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit'),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')
        ]
      ])
    );
  } else {
    await ctx.reply(
      '–û–±–µ—Ä—ñ—Ç—å, –∫–æ–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–∫–∞–π —â–æ–± –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏):',
      Markup.inlineKeyboard([
        [0, 1, 3, 7].map((d) =>
          Markup.button.callback(selected.has(d) ? `‚úÖ ${d} –¥–Ω.` : `${d} –¥–Ω.`, `toggle_${d}`)
        ),
        [
          Markup.button.callback('‚ùé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_remind'),
          Markup.button.callback('üíæ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit'),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')
        ]
      ])
    );
  }
}

async function saveChanges(ctx) {
  const userId = ctx.from.id;
  const reminders = ctx.scene.state.remindersList;
  const reminderIndex = reminders.findIndex(r => r.id === ctx.scene.state.editId);

  if (reminderIndex === -1) {
    await ctx.reply('‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.');
    return;
  }

  reminders[reminderIndex] = ctx.scene.state.reminder;
  saveUserReminders(userId, reminders);

  await ctx.reply(
    '‚úÖ –í—Å—ñ –∑–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.',
    Markup.keyboard(['‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']).resize()
  );
}

module.exports = editReminder;
