const { Scenes, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');

const dataDir = './userData';
const getUserFilePath = (userId) => path.join(dataDir, `${userId}.json`);
const loadReminders = (userId) =>
  fs.existsSync(getUserFilePath(userId))
    ? JSON.parse(fs.readFileSync(getUserFilePath(userId)))
    : [];
const saveReminders = (userId, data) =>
  fs.writeFileSync(getUserFilePath(userId), JSON.stringify(data, null, 2));

const feedbacks = {
  0: ['üéâ –£ —Å–∞–º –¥–µ–Ω—å ‚Äî —Å–≤—è—Ç–∫—É—î–º–æ —Ä–∞–∑–æ–º!', 'üéÇ –ü—Ä—è–º–æ –≤ –¥–µ–Ω—å –ø–æ–¥—ñ—ó ‚Äî —à–∏–∫–∞—Ä–Ω–æ!'],
  1: ['‚è≥ –ó–∞ –¥–µ–Ω—å? –Ü–¥–µ–∞–ª—å–Ω–∏–π —Ç–∞–π–º—ñ–Ω–≥!', 'üìå –ì–∞—Ä–Ω–æ! –Ñ —â–µ –¥–æ–±–∞ –Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É.'],
  3: ['üß† –ó–∞ 3 –¥–Ω—ñ ‚Äî —ñ–¥–µ—è –≥–µ–Ω—ñ—è!', 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–æ —ñ —Ç–æ—á–Ω–æ.'],
  7: ['üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å? –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!', 'üõé –¶–µ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ.']
};

const editReminder = new Scenes.WizardScene(
  'editReminder',
  (ctx) => {
    const reminders = loadReminders(ctx.from.id);
    const index = ctx.session.editingIndex;
    if (!reminders[index]) {
      ctx.reply('‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      return ctx.scene.leave();
    }

    ctx.session.reminders = reminders;
    ctx.session.newData = {
      date: reminders[index].date,
      note: reminders[index].note || '',
      remindBefore: reminders[index].remindBefore || [0]
    };

    ctx.reply(
      '‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25.07.1995):',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_date')],
        [Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')]
      ])
    );
    return ctx.wizard.next();
  },

  (ctx) => {
    if (ctx.callbackQuery?.data === 'skip_date') {
      ctx.answerCbQuery();
    } else if (ctx.callbackQuery?.data === 'cancel_edit') {
      ctx.answerCbQuery();
      ctx.reply('‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
      return ctx.scene.leave();
    } else {
      const dateText = ctx.message?.text;
      if (!dateText || !/^\d{1,2}[./\-\s]\d{1,2}([./\-\s]\d{2,4})?$/.test(dateText)) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –ü—Ä–∏–∫–ª–∞–¥: 25.07.1995');
      }
      ctx.session.newData.date = dateText.trim();
    }

    ctx.reply(
      'üìù –í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É (–∞–±–æ –∑–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—å–æ):',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', 'skip_note')],
        [Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')]
      ])
    );
    return ctx.wizard.next();
  },

  (ctx) => {
    if (ctx.callbackQuery?.data === 'skip_note') {
      ctx.answerCbQuery();
    } else if (ctx.callbackQuery?.data === 'cancel_edit') {
      ctx.answerCbQuery();
      ctx.reply('‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
      return ctx.scene.leave();
    } else {
      ctx.session.newData.note = ctx.message?.text?.trim() || '';
    }

    const selected = ctx.session.newData.remindBefore;
    const getKeyboard = () => {
      return Markup.inlineKeyboard([
        [0, 1, 3, 7].map((d) => Markup.button.callback(`${selected.includes(d) ? '‚úÖ' : '‚òê'} ${d} –¥–Ω.`, `toggle_${d}`))],
        [Markup.button.callback('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit'), Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')]
      ]);
    };

    ctx.reply('üîÅ –û–±–µ—Ä–∏, –∫–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞):', getKeyboard());
    return ctx.wizard.next();
  },

  async (ctx) => {
    const data = ctx.callbackQuery?.data;
    if (!data) return;
    const selected = ctx.session.newData.remindBefore;

    if (data.startsWith('toggle_')) {
      const value = parseInt(data.replace('toggle_', ''));
      const index = selected.indexOf(value);
      if (index > -1) selected.splice(index, 1);
      else selected.push(value);
      selected.sort((a, b) => a - b);
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [0, 1, 3, 7].map((d) => Markup.button.callback(`${selected.includes(d) ? '‚úÖ' : '‚òê'} ${d} –¥–Ω.`, `toggle_${d}`))],
          [Markup.button.callback('‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏', 'save_edit'), Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel_edit')]
        ]
      });
      const pool = feedbacks[value];
      if (pool) {
        const msg = pool[Math.floor(Math.random() * pool.length)];
        await ctx.reply(msg);
      }
      return;
    }

    if (data === 'save_edit') {
      const index = ctx.session.editingIndex;
      const reminders = ctx.session.reminders;
      reminders[index] = ctx.session.newData;
      saveReminders(ctx.from.id, reminders);
      await ctx.editMessageReplyMarkup();
      const successMessages = [
  '‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ! –Ø –ø–∏—à–∞—é—Å—å —Ç–æ–±–æ—é! üòé',
  'üéâ –Ü–¥–µ–∞–ª—å–Ω–æ! –¢–µ–ø–µ—Ä –Ω–µ –∑–∞–±—É–¥–µ—à –Ω–∞–≤—ñ—Ç—å —á–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤!',
  'üìå –ó–±–µ—Ä–µ–∂–µ–Ω–æ. –Ø —â–æ–π–Ω–æ –≤—ñ–¥—á—É–≤ –ø—Ä–∏–ø–ª–∏–≤ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ—Å—Ç—ñ!',
  '‚ú® –í–∞—É! –¶–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –∫—Ä–∞—â–µ, –Ω—ñ–∂ –º–æ—ó –∞–ª–≥–æ—Ä–∏—Ç–º–∏!',
  'ü•≥ –ì–æ—Ç–æ–≤–æ! –î–∞—Ç–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞. –ó–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏!'
];
ctx.reply(successMessages[Math.floor(Math.random() * successMessages.length)]);
      return ctx.scene.leave();
    }

    if (data === 'cancel_edit') {
      ctx.reply('‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
      return ctx.scene.leave();
    }
  }
);

module.exports = editReminder;
