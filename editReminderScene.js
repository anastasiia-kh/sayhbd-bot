const { Scenes, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');

const dataDir = './userData';
const getUserFilePath = (userId) => path.join(dataDir, `${userId}.json`);
const loadReminders = (userId) =>
  fs.existsSync(getUserFilePath(userId))
    ? JSON.parse(fs.readFileSync(getUserFilePath(userId)))
    : [];
const saveReminders = (userId, data) =>
  fs.writeFileSync(getUserFilePath(userId), JSON.stringify(data, null, 2));

const editReminder = new Scenes.BaseScene('editReminder');

// –í—Ö—ñ–¥ —É —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
editReminder.enter((ctx) => {
  const userId = ctx.from.id;
  const reminders = ctx.scene.state.allReminders || loadReminders(userId);
  const index = ctx.scene.state.editIndex;
  const reminder = reminders[index];

  if (!reminder) {
    ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
    return ctx.scene.leave();
  }

  ctx.scene.state.current = reminder;
  ctx.scene.state.selected = new Set(reminder.remindBefore || []);

  ctx.reply(
    `–†–µ–¥–∞–≥—É—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\nüìÖ ${reminder.date}${reminder.note ? ` ‚Äî ${reminder.note}` : ''}\n\n–û–±–µ—Ä—ñ—Ç—å, –∫–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏:`,
    Markup.inlineKeyboard([
      [0, 1, 3, 7].map((d) => ({
        text: ctx.scene.state.selected.has(d) ? `‚úÖ ${d} –¥–Ω.` : `${d} –¥–Ω.`,
        callback_data: `toggle_${d}`
      })),
      [
        { text: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data: 'save_edit' },
        { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_edit' }
      ]
    ])
  );
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
editReminder.on('callback_query', async (ctx) => {
  const data = ctx.callbackQuery.data;

  if (data.startsWith('toggle_')) {
    const day = parseInt(data.split('_')[1]);
    const selected = ctx.scene.state.selected;

    if (selected.has(day)) {
      selected.delete(day);
    } else {
      selected.add(day);
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [0, 1, 3, 7].map((d) => ({
          text: selected.has(d) ? `‚úÖ ${d} –¥–Ω.` : `${d} –¥–Ω.`,
          callback_data: `toggle_${d}`
        })),
        [
          { text: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏', callback_data: 'save_edit' },
          { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_edit' }
        ]
      ]
    });
    return;
  }

  if (data === 'save_edit') {
    const userId = ctx.from.id;
    const index = ctx.scene.state.editIndex;
    const reminders = loadReminders(userId);
    reminders[index].remindBefore = [...ctx.scene.state.selected].sort((a, b) => a - b);
    saveReminders(userId, reminders);

    const successMessages = [
      '‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ! –Ø –ø–∏—à–∞—é—Å—å —Ç–æ–±–æ—é! üòé',
      'üéâ –Ü–¥–µ–∞–ª—å–Ω–æ! –¢–µ–ø–µ—Ä –Ω–µ –∑–∞–±—É–¥–µ—à –Ω–∞–≤—ñ—Ç—å —á–µ—Ä–µ–∑ 7 –¥–Ω—ñ–≤!',
      'üìå –ó–±–µ—Ä–µ–∂–µ–Ω–æ. –Ø —â–æ–π–Ω–æ –≤—ñ–¥—á—É–≤ –ø—Ä–∏–ø–ª–∏–≤ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ—Å—Ç—ñ!',
      '‚ú® –í–∞—É! –¶–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –∫—Ä–∞—â–µ, –Ω—ñ–∂ –º–æ—ó –∞–ª–≥–æ—Ä–∏—Ç–º–∏!',
      'ü•≥ –ì–æ—Ç–æ–≤–æ! –î–∞—Ç–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞. –ó–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏!'
    ];
    ctx.reply(successMessages[Math.floor(Math.random() * successMessages.length)]);
    return ctx.scene.leave();
  }

  if (data === 'cancel_edit') {
    ctx.reply('‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
    return ctx.scene.leave();
  }
});

module.exports = editReminder;
